# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_xz2avVakxJ0CC0Csy_FJWjLNeGAmT6S

IPML Project

Importing libraries
"""

import numpy as np
from skimage import data, color,io, exposure
from matplotlib import pyplot as plt
from skimage.transform import rescale
from skimage.restoration import denoise_tv_chambolle 
from skimage.feature import canny
from skimage.color.colorconv import rgb2hsv
from google.colab import drive
from PIL import Image
import os

import PIL
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential

"""Utility functions"""

def show_image(img,title = ""):
  io.imshow(img)
  plt.title(title)
  plt.show()

def load_image(path=""):
  if path == "":
    return io.imread('/content/drive/MyDrive/ShantanuDalRice/DalRice (1).jpeg')
  else:
    img = io.imread(path)
    return img

"""Preprocessing image functions"""

def quarter_rescale_image(img):
  image_rescaled = rescale(img, 1/4, anti_aliasing=True, multichannel=True)
  #show_image(img, 'Original image')
  #show_image(image_rescaled, 'Rescaled image')
  return image_rescaled

def adjust_exposure(gray_scaled_image):
  exposure_image = exposure.equalize_hist(gray_scaled_image)
  show_image(exposure_image)
  return exposure_image

def exposure_auto_equalize(img):
  image_adapteq = exposure.equalize_adapthist(img, clip_limit=0.03)
  # show_image(image_adapteq)
  return image_adapteq

def turn_into_grayscale(img):
  gray_scaled_image = color.rgb2gray(img)
  # show_image(gray_scaled_image)
  return gray_scaled_image

def adaptive_exposure(img):
  image_adapteq = exposure.equalize_adapthist(img, clip_limit=0.03)
  show_image(image_adapteq)
  return image_adapteq

def denoise_image(img):
  denoised_image = denoise_tv_chambolle(img,weight=0.1,multichannel=True)
  # show_image(img, 'Noisy image')
  # show_image(denoised_image, 'Denoised image')
  return denoised_image

def detect_edge(img):
 canny_edges = canny(img, sigma=2.5).astype(int) 
 #show_image(canny_edges, "Edges with Canny") 
 return canny_edges

def convert_to_hsv(img):
  hsv_image = rgb2hsv(img)
  return hsv_image

def plot_histogram_rgb(img, title="", bins_value=256):
  plt.hist(img.ravel(), bins=bins_value)
  plt.title(title)
  plt.show()

def print_hsv(img):
  hsv_image = convert_to_hsv(img)
  hue_img = hsv_image[:, :, 0]
  sat_img = hsv_image[:, :, 1]
  val_img = hsv_image[:, :, 2]
  show_image(hue_img)
  show_image(sat_img)
  show_image(val_img)

def save_image_to_drive(img,path):
  img = (img * 255).astype(np.uint8)
  im = Image.fromarray(img)
  im.save(path)

dal = load_image("/content/drive/MyDrive/ShantanuDalRice/DalRice (68).jpeg")
rice = load_image("/content/drive/MyDrive/ShantanuDalRice/DalRice (63).jpeg")

#resize image
dal_rz = quarter_rescale_image(dal)
rice_rz = quarter_rescale_image(rice)

show_image(dal,'dal original')
show_image(dal_rz, 'dal resized')

dal_denoised = denoise_image(dal_rz)
rice_denoised = denoise_image(rice_rz)

dal_egde = detect_edge(turn_into_grayscale(dal_denoised))
rice_egde = detect_edge(turn_into_grayscale(rice_denoised))

save_image_to_drive(dal_egde,"/content/drive/MyDrive/Edgypics/dal.jpg")
save_image_to_drive(rice_egde,"/content/drive/MyDrive/Edgypics/rice.jpg")

dal_1 =  quarter_rescale_image(load_image("/content/drive/MyDrive/ShantanuDalRice/DalRice (71).jpeg"))
dal_2 =  quarter_rescale_image(load_image("/content/drive/MyDrive/ShantanuDalRice/DalRice (94).jpeg"))
rice_1 =  quarter_rescale_image(load_image("/content/drive/MyDrive/ShantanuDalRice/DalRice (20).jpeg"))
rice_2 = quarter_rescale_image(load_image("/content/drive/MyDrive/ShantanuDalRice/DalRice (36).jpeg"))

from skimage import metrics
ss = metrics.variation_of_information(dal_egde,rice_egde)

dal_1

ss2 = metrics.structural_similarity(rice_1,rice_2,multichannel=True)

ss2

print_hsv(exposure_auto_equalize(dal_rz))
print_hsv(exposure_auto_equalize(rice_rz))

dal_hist_sat = convert_to_hsv(exposure_auto_equalize(dal_rz))
show_image(dal_hist_sat[:,:,1])
plot_histogram_rgb(dal_hist_sat[:,:,1])

rice_hist_sat = convert_to_hsv(exposure_auto_equalize(rice_rz))
show_image(rice_hist_sat[:,:,1])
plot_histogram_rgb(rice_hist_sat[:,:,1])

def get_images_info(label,path,ohe_label):
  info = []
  if ohe_label == 1:
    ohe = [0,1]
  elif ohe_label == 2:
    ohe = [1,0]
  for root, __, files in os.walk(path):
    for f in files:
        if f.endswith(".jpeg"):
          info.append({
                      "img": Image.open(os.path.join(root, f)), # add an appropriate reading flag if you want
                      # optional
                      label : str(f),
                      'ohe_label' : ohe,
                      'type' : ohe_label
          })
  return info



dal_labels = get_images_info('dal',"/content/drive/MyDrive/ShantanuDalRiceLabelled/dal", 1)
rice_labels = get_images_info('rice',"/content/drive/MyDrive/ShantanuDalRiceLabelled/rice",2)

dal_labels = get_images_info('dal',"/content/drive/MyDrive/ShantanuDalRiceLabelled/dal", 1)
rice_labels = get_images_info('rice',"/content/drive/MyDrive/ShantanuDalRiceLabelled/rice",2)

dal_labels_2 = get_images_info('dal',"/content/drive/MyDrive/ShantanuDalRiceLabelled/dal", 1)
rice_labels_2 = get_images_info('rice',"/content/drive/MyDrive/ShantanuDalRiceLabelled/rice",2)



train_data = []
train_labels = []
for i in dal_labels:
  data = np.asarray(i['img'])
  label = i['type']
  train_data.append(data)
  train_labels.append(label)
for i in rice_labels:
  data = np.asarray(i['img'])
  label = i['type']
  train_data.append(data)
  train_labels.append(label)

train_data
train_labels

train_data = np.asarray(train_data)

train_data.shape
np.array(train_labels).shape

train_data

def get_prediction(path):
  img_rgb = quarter_rescale_image(load_image(path))
  img_hsv = convert_to_hsv(img_rgb)
  saturation = img_hsv[:,:,1]
  value = img_hsv[:,:,2]
  edge_val = detect_edge(turn_into_grayscale(img_rgb))
  print(edge_val.mean()*100)
  print(saturation.mean())
  if saturation.mean() > 0.23 and edge_val.mean()*100 > 4:
    return "image is dal"
  else: 
    return "image is rice"

get_prediction("/content/drive/MyDrive/TestImage/testimg (17).jpeg")

def compute_features(train_data):
  X = np.empty(4)
  for img in train_data:
    
    rz_image = quarter_rescale_image(img)
    exp_image = exposure_auto_equalize(rz_image)
    denoised_image = denoise_tv_chambolle(exp_image,weight=0.1,multichannel=True)
    hsv_image = convert_to_hsv(denoised_image)
    
    edges = detect_edge(turn_into_grayscale(denoised_image))
    hue_img = hsv_image[:, :, 0]
    sat_img = hsv_image[:, :, 1]
    val_img = hsv_image[:, :, 2]
    
    a = np.array([edges.mean(), hue_img.mean(),  sat_img.mean(), val_img.mean()])
    X = np.vstack((X, a))
  X = X[1:]
  return X

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

X = compute_features(train_data)
y = np.array(train_labels)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)
  
knn = KNeighborsClassifier(n_neighbors=7)
  
knn.fit(X_train, y_train)
  
print(knn.predict(X_test))

from sklearn import metrics

print("Accuracy:",metrics.accuracy_score(y_test, knn.predict(X_test)))

def convert_to_features(img):
    rz_image = quarter_rescale_image(img)
    exp_image = exposure_auto_equalize(rz_image)
    denoised_image = denoise_tv_chambolle(exp_image,weight=0.1,multichannel=True)
    hsv_image = convert_to_hsv(denoised_image)
    
    edges = detect_edge(turn_into_grayscale(denoised_image))
    hue_img = hsv_image[:, :, 0]
    sat_img = hsv_image[:, :, 1]
    val_img = hsv_image[:, :, 2]
    
    a = np.array([edges.mean(), hue_img.mean(),  sat_img.mean(), val_img.mean()])
    
    return a.reshape(1, -1)

result = knn.predict(convert_to_features(load_image("/content/drive/MyDrive/TestImage/testimg (27).jpeg")))
show_image("/content/drive/MyDrive/TestImage/testimg (27).jpeg")
if result[0]==1:
  print("Image is dal")
else:
  print("Image is rice")

get_prediction("/content/drive/MyDrive/TestImage/testimg (17).jpeg")